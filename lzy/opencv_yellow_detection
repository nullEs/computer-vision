import org.opencv.core.*;

import java.util.ArrayList;

import static org.opencv.core.Core.bitwise_or;
import static org.opencv.core.Core.inRange;
import static org.opencv.core.CvType.CV_8UC1;
import static org.opencv.highgui.HighGui.*;
import static org.opencv.imgcodecs.Imgcodecs.imread;
import static org.opencv.imgproc.Imgproc.*;

public class Lecture1 {
    public static void main(String[] args) {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        Mat img = imread("../../image_2.jpg");
        Size size = img.size();
        int type = img.type();
        imshow("image", img);
        waitKey(0);

        Mat gray_image = new Mat(size, CV_8UC1);
        cvtColor(img, gray_image, COLOR_BGR2GRAY);
        imshow("gray scale", gray_image);
        waitKey(0);
        destroyAllWindows();

        Mat hsv_image = new Mat(size, type);
        cvtColor(img, hsv_image, COLOR_BGR2HSV);
        imshow("hsv", hsv_image);
        waitKey(0);

        Mat upper = new Mat(size, CV_8UC1), lower = new Mat(size, CV_8UC1);
       inRange(hsv_image, new Scalar(30, 100, 100), new Scalar(60, 255, 255), upper);
        inRange(hsv_image, new Scalar(20, 100, 100), new Scalar(30, 255, 255), lower);

        Mat mask = new Mat(size, CV_8UC1);
        bitwise_or(lower, upper, mask);
        imshow("mask", mask);
        waitKey(0);

        Mat bgr_headlights = new Mat(size, type), blurred_headlights = new Mat(size, type);
        bitwise_or(img, img, bgr_headlights, mask);
        imshow("headlights", bgr_headlights);
        waitKey(0);

        blur(mask, blurred_headlights, new Size(3, 3));
        Canny(mask, mask, 100, 200);
        ArrayList<MatOfPoint> contours = new ArrayList<>();
        Mat hierarchy = new Mat();
        findContours(mask, contours, hierarchy, 0, 1);

        Mat mContours = new Mat(size, type);
        int len = contours.size();
        for (int i = 0; i < len; i++) {
            drawContours(mContours, contours, i, new Scalar(255, 255, 255));
        }
        imshow("contours", mContours);
        waitKey(0);
        destroyAllWindows();
    }
}
